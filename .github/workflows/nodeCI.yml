# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    # --- Server CI ---
    - name: Install server dependencies
      working-directory: server
      run: npm install

    - name: Run server unit tests
      working-directory: server
      run: npm test --coverage

    - name: Lint server code
      working-directory: server
      run: npx eslint

    # --- Client CI ---
    - name: Install client dependencies
      working-directory: client
      run: npm install

    - name: Lint client code
      working-directory: client
      run: npx eslint
      
  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Reinstall and start both servers
      - name: Install and Start Backend
        working-directory: server
        run: |
          npm install
          npm start &
        env:
          MONGO_URI: mongodb://localhost:27017/fake_so
          TERM: xterm

      - name: Install and Start Frontend
        working-directory: client
        run: |
          npm install
          npm start &
        env:
          TERM: xterm

      - name: Wait for servers to be ready
        run: |
          npx wait-on http://localhost:8000 http://localhost:3000 --timeout 30000
          
      - name: Run Cypress tests
        working-directory: client
        run: npx cypress run
