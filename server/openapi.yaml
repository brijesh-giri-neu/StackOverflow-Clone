openapi: 3.1.0
info:
  title: Fake StackOverflow REST API
  version: 1.0.0
  description: |
    API for managing questions, answers, tags, and users of a fake stack overflow application.

    The API is organized into four main routes:
    * Tags route: Managing tags and their statistics
    * Questions route: Managing questions and their operations
    * Answers route: Managing answers to questions
    * Users route: Managing user registration, login, and user profiles

servers:
  - url: http://localhost:8000
    description: Development server for the Fake StackOverflow REST API.

tags:
  - name: Tags
    description: Operations related to tags
  - name: Questions
    description: Operations related to questions
  - name: Answers
    description: Operations related to answers
  - name: Users
    description: Operations related to user registration, login, and profiles

components:
  responses:
    BadRequest:
      description: Bad Request - Validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal Server Error"
  schemas:
    Tag:
      type: object
      properties:
        _id:
          type: string
          example: "679846196243c96505ba4007"
        name:
          type: string
          nullable: true
          example: "react"
        __v:
          type: integer
          example: 0

    TagCount:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: "react"
        qcnt:
          type: integer
          example: 1

    Answer:
      type: object
      properties:
        _id:
          type: string
          example: "679d61405af1815cc9398a86"
        text:
          type: string
          example: "You can solve your problem this way."
        ans_by:
          type: string
          example: "user-name"
        ans_date_time:
          type: string
          format: date-time
          example: "2025-02-02T00:28:19.406Z"
        __v:
          type: integer
          example: 0

    Question:
      type: object
      properties:
        _id:
          type: string
          example: "679846196243c96505ba4007"
        title:
          type: string
          example: "Question title"
        text:
          type: string
          example: "This explains the question further"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        answers:
          type: array
          items:
            oneOf:
              - type: string
                example: "679846196243c96505ba4007"
              - $ref: "#/components/schemas/Answer"
        asked_by:
          type: string
          example: "user-name"
        ask_date_time:
          type: string
          format: date-time
          example: "2025-02-02T00:28:19.406Z"
        views:
          type: integer
          default: 0
          example: 0
        __v:
          type: integer
          example: 0

    AddAnswerRequest:
      type: object
      required:
        - qid
        - ans
      properties:
        qid:
          type: string
          example: "679846196243c96505ba4007"
        ans:
          type: object
          required:
            - text
            - ans_by
            - ans_date_time
          properties:
            text:
              type: string
              example: "It might be beneficial to do it this way."
            ans_by:
              type: string
              example: "user-name"
            ans_date_time:
              type: string
              format: date-time
              example: "2025-02-02T00:28:19.406Z"

    AddQuestionRequest:
      type: object
      required:
        - title
        - text
        - tags
        - asked_by
        - ask_date_time
      properties:
        title:
          type: string
          minLength: 1
          pattern: '^\s*\S+.*$'
          example: "What can I do to resolve this error?"
        text:
          type: string
          minLength: 1
          pattern: '^\s*\S+.*$'
          example: "More context regarding the question"
        tags:
          type: array
          minItems: 1
          maxItems: 5
          items:
            type: object
            properties:
              name:
                type: string
            required:
              - name
        asked_by:
          type: string
          minLength: 1
          pattern: '^\s*\S+.*$'
          example: "user-name"
        ask_date_time:
          type: string
          format: date-time
          example: "2025-02-02T00:28:19.406Z"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: ".body.name"
              message:
                type: string
                example: "must be string"
              errorCode:
                type: string
                example: "type.openapi.validation"

    User:
      type: object
      properties:
        _id:
          type: string
          example: "679846196243c96505ba4007"
        email:
          type: string
          example: "user@example.com"
        displayName:
          type: string
          example: "user123"
        password:
          type: string
          example: "hashedPassword"

    UserProfileResponseType:
      type: object
      properties:
        _id:
          type: string
          example: "679846196243c96505ba4007"
        user:
          $ref: "#/components/schemas/User"
        fullName:
          type: string
          example: "John Doe"
        location:
          type: string
          example: "New York, USA"
        title:
          type: string
          example: "Software Engineer"
        aboutMe:
          type: string
          example: "A passionate developer"
        website:
          type: string
          example: "https://johndoe.com"
        twitter:
          type: string
          example: "https://twitter.com/johndoe"
        github:
          type: string
          example: "https://github.com/johndoe"

    UserProfileUpdateRequest:
      type: object
      properties:
        fullName:
          type: string
          example: "John Doe"
        location:
          type: string
          example: "New York, USA"
        title:
          type: string
          example: "Software Engineer"
        aboutMe:
          type: string
          example: "A passionate developer"
        website:
          type: string
          example: "https://johndoe.com"
        twitter:
          type: string
          example: "https://twitter.com/johndoe"
        github:
          type: string
          example: "https://github.com/johndoe"
    
    RegisterVoteRequest:
      type: object
      required:
        - postId
        - postType
        - type
      properties:
        postId:
          type: string
          example: "6616c72c8d3fe21e52c1123a"
        postType:
          type: string
          enum: [Question, Answer]
          example: "Question"
        type:
          type: integer
          enum: [-1, 1]
          example: 1

    RegisterVoteResponse:
      type: object
      properties:
        message:
          type: string
          example: "Vote registered successfully"

paths:
  # Tags Controller Endpoints
  /tag/getTagsWithQuestionNumber:
    get:
      tags:
        - Tags
      summary: Get all tags with their question counts
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagCount"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Questions Controller Endpoints
  /question/addQuestion:
    post:
      tags:
        - Questions
      summary: Add a new question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddQuestionRequest"
      responses:
        "200":
          description: Question added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /question/getQuestionById/{qid}:
    get:
      tags:
        - Questions
      summary: Get question by ID
      parameters:
        - name: qid
          in: path
          required: true
          schema:
            type: string
            example: "679846196243c96505ba4007"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /question/getQuestion:
    get:
      tags:
        - Questions
      summary: Get filtered questions
      parameters:
        - name: order
          in: query
          required: false
          schema:
            type: string
            default: newest
            example: "newest"
          description: Order of questions (e.g., newest)
        - name: search
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: string
            example: "Android studio [mobile]"
          description: Search term to filter questions
          explode: true
          allowReserved: true
          x-express-openapi-validator:
            allowReservedCharacters: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
                minItems: 0
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Answers Controller Endpoints
  /answer/addAnswer:
    post:
      tags:
        - Answers
      summary: Add a new answer to a question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddAnswerRequest"
      responses:
        "200":
          description: Answer added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Users Controller Endpoints
  /user/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Registers a new user with email, displayName, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                displayName:
                  type: string
                  example: "user123"
                password:
                  type: string
                  example: "password123"
              required:
                - email
                - displayName
                - password
      responses:
        "200":
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Email already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already registered"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/login:
    post:
      tags:
        - Users
      summary: Log in a user
      description: Logs in a user by verifying their email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Incorrect email or password"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/logout:
    post:
      tags:
        - Users
      summary: Log out a user
      description: Logs out a user by destroying their session and clearing the session cookie.
      responses:
        "200":
          description: Logout successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # UserProfiles Controller Endpoints
  /userprofile/{userId}:
    get:
      tags:
        - Users
      summary: Get user profile by userId
      description: Retrieve the user profile associated with the given user's ObjectId.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: "679846196243c96505ba4007"
      responses:
        "200":
          description: Successful response. Returns the user profile.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponseType"
        "404":
          description: User profile not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Users
      summary: Update user profile by userId
      description: Update the user profile for the given user's ObjectId with new profile data.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: "679846196243c96505ba4007"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileUpdateRequest"
      responses:
        "200":
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponseType"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
          
  /user/session:
    get:
      tags:
        - Users
      summary: Get currently logged-in user from session
      description: |
        Returns the currently authenticated user's data if a session exists.
        This endpoint checks the session and fetches the user from the database using the stored userId.
      responses:
        "200":
          description: User session is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not authenticated"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
  
  /vote:
    post:
      tags:
        - Questions
        - Answers
        - Users
      summary: Register or update a vote on a post
      description: |
        Register a vote (+1 or -1) for a question or answer by the authenticated user.
        If the vote already exists, it will be updated. Otherwise, a new vote will be created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterVoteRequest"
      responses:
        "200":
          description: Vote registered or updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterVoteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"


